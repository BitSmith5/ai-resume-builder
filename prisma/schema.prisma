generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  phone         String?
  linkedinUrl   String?
  portfolioUrl  String?
  preferences   Json?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id        Int      @id @default(autoincrement())
  userId    String
  title     String
  content   Json
  strengths Strength[]
  workExperience WorkExperience[]
  education Education[]
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Strength {
  id        Int      @id @default(autoincrement())
  resumeId  Int
  skillName String
  rating    Int
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          Int      @id @default(autoincrement())
  resumeId    Int
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id          Int      @id @default(autoincrement())
  resumeId    Int
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  gpa         Float?
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
