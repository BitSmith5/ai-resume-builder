generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  linkedinUrl   String?
  githubUrl     String?
  location      String?
  phone         String?
  portfolioUrl  String?
  preferences   Json?
  accounts      Account[]
  resumes       Resume[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id                  Int                   @id @default(autoincrement())
  userId              String
  title               String
  jobTitle            String?               // Job title to display on the resume
  template            String?               @default("modern") // Template ID for the resume
  content             Json
  profilePicture      String?               // Stores file path like "uploads/profile-pictures/filename.jpg"
  deletedSections     Json?                 @default("[]") // Array of section names that have been deleted
  sectionOrder        Json?                 @default("[]") // Array of section names in display order
  exportSettings      Json?                 @default("{}") // Export settings for PDF generation
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  education           Education[]
  user                User                  @relation(fields: [userId], references: [id])
  strengths           Strength[]
  workExperience      WorkExperience[]
  courses             Course[]
  interests           Interest[]
  projects            Project[]
  languages           Language[]
  publications        Publication[]
  awards              Award[]
  volunteerExperience VolunteerExperience[]
  references          Reference[]
}

model Strength {
  id        Int    @id @default(autoincrement())
  resumeId  Int
  skillName String
  rating    Int
  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  resumeId     Int
  company      String
  position     String
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  bulletPoints Json      @default("[]")
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id          Int       @id @default(autoincrement())
  resumeId    Int
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  gpa         Float?
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Course {
  id       Int     @id @default(autoincrement())
  resumeId Int
  title    String
  provider String
  link     String?
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Interest {
  id       Int    @id @default(autoincrement())
  resumeId Int
  name     String
  icon     String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id           Int       @id @default(autoincrement())
  resumeId     Int
  title        String
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  technologies Json      @default("[]")
  link         String?
  bulletPoints Json      @default("[]")
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Language {
  id          Int    @id @default(autoincrement())
  resumeId    Int
  name        String
  proficiency String
  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Publication {
  id       Int    @id @default(autoincrement())
  resumeId Int
  title    String
  authors  String
  journal  String
  year     String
  doi      String?
  link     String?
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Award {
  id           Int       @id @default(autoincrement())
  resumeId     Int
  title        String
  organization String
  year         String
  bulletPoints Json      @default("[]")
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model VolunteerExperience {
  id           Int       @id @default(autoincrement())
  resumeId     Int
  organization String
  position     String
  location     String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  hoursPerWeek String?
  bulletPoints Json      @default("[]")
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Reference {
  id          Int    @id @default(autoincrement())
  resumeId    Int
  name        String
  title       String
  company     String
  email       String
  phone       String?
  relationship String
  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
